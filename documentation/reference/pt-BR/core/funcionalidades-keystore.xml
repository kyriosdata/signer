<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [

]>
<chapter id="funcionalidades-keystore">

    <title id="funcionalidades">Funcionalidades relativas ao Keystore</title>


    <section>
        <title>Introdução</title>
        <para>
            A
            <ulink url="www.rsalabs.com/">RSA Laboratories</ulink>
            definiu algumas especificações de uso de criptografia e assinatura digital conhecidas pelo prefixo
            <ulink url="https://brazil.emc.com/emc-plus/rsa-labs/standards-initiatives/public-key-cryptography-standards.htm">PKCS</ulink>
            . 
            Duas delas estão relacionadas ao tipo de keystore (chaveiro) que é o recipiente que armazena um par de chaves criptográficas. São elas PKCS#11 e PKCS#12.
        </para>

        <para>
            PKCS#11 define uma API genérica para acesso a hardware criptográfico, comumente chamados de Token (pendrive) ou Smartcard (cartão e leitora).
        </para>

        <para>
            PKCS#12 define um formato de arquivo digital usado para guardar chaves privadas acompanhadas de seus certificados digitais.
        </para>

        <para>
            A linguagem Java suporta a utilização desses formatos e com isso define o que chamamos de KeyStore. 
             Um KeyStore é usado para armazenar um ou mais certificados digitais  e também o par de chaves,
             com isso é possível utilizar os padrões da RSA através da mesma interface. 
             A partir de um objeto KeyStore instanciado é possível navegar pelos
            certificados digitais contidos no KeyStore por meio dos apelidos (alias) destes certificados.
        </para>

        <para>
            O componente Demoiselle-Signer visa facilitar o uso destes KeyStores, seja PKCS#11 ou PKCS#12. 
            A maneira como se carrega um KeyStore do tipo PKCS#11, que é um dispositivo em hardware, 
            difere quando trabalhamos com sistemas operacionais diferentes e, em alguns casos,até mesmo versões de JVM.
        </para>

        <para>
            No ambiente Windows, é possível utilizar a API padrão do sistema operacional de carregamento de KeyStore PKCS#11, chamada
            <ulink url="https://en.wikipedia.org/wiki/Microsoft_CryptoAPI">MSCAPI</ulink>
            que controla os certificados instalados de uma forma mais genérica, mas para isso precisamos também saber a versão da JVM instalada. 
            Isso é necessário porque na versão 1.6 a implementação JCE já comporta o tratamento nativo na
            plataforma e na versão 1.5 ou inferior é necessário utilizar uma biblioteca para trabalhar com a API nativa do Windows.
        </para>

        <para>
            Em ambiente Unix-like é possível carregar um KeyStore PKCS#11 a partir de um driver específico, mas é preciso saber o fabricante e o caminho do driver no sistema
            operacional.
        </para>

        <para>Para carregamento de KeyStore formato PKCS#12, ou seja, em arquivo, o processo de carregamento é o mesmo para os diversos sistemas operacionais.</para>
    </section>

    <para>
        As funcionalidades do componente estão acessíveis por meio da fábrica
        <emphasis>org.demoiselle.signer.core.keystore.loader.factory.KeyStoreLoaderFactory</emphasis>
        de objetos do tipo
        <emphasis>org.demoiselle.signer.core.keystore.loader.KeyStoreLoader.</emphasis>
    </para>
    <para>
        O uso da fábrica é importante, mas não é obrigatório. A importância dela se deve à funcionalidade de descobrir qual a melhor implementação para o carregamento de KeyStore
        baseando-se em configurações. Utilizando a fábrica não é necessário escrever códigos específicos para um determinado sistema operacional, pois a fábrica identifica qual o
        sistema operacional e a versão da JVM para fabricar a melhor implementação.
    </para>

    <para>
        Exemplo de uso da fábrica de objetos KeyStoreLoader
    </para>

    <programlisting role="JAVA">
        <![CDATA[KeyStoreLoader keyStoreLoader = KeyStoreLoaderFactory.factoryKeyStoreLoader();]]>
    </programlisting>

    <para>
        Exemplo de uso da fábrica de objetos KeyStoreLoader para KeyStore PKCS#12
    </para>

    <programlisting role="JAVA">
        <![CDATA[KeyStoreLoader keyStoreLoader = KeyStoreLoaderFactory.factoryKeyStoreLoader(new File("/usr/keystore.p12"));]]>
    </programlisting>

    <section>
        <title>Carregamento de KeyStore PKCS#12</title>
        <para>
            Para carregar um KeyStore a partir de uma arquivo no formato PKCS#12 basta utilizar a classe
            <emphasis>org.demoiselle.signer.core.keystore.loader.implementation.FileSystemKeyStoreLoader.</emphasis>
        </para>

        <para>
            Abaixo temos exemplos de uso.
        </para>

        <programlisting role="JAVA">
            <![CDATA[KeyStore keyStore = (new FileSystemKeyStoreLoader(new File("/usr/keystore.p12"))).getKeyStore("password");]]>
        </programlisting>

        <programlisting role="JAVA">
            <![CDATA[KeyStore keyStore = KeyStoreLoaderFactory.factoryKeyStoreLoader(new File("/usr/keystore.p12")).getKeyStore("password");]]>
        </programlisting>

    </section>

    <section>
        <title>Carregamento de KeyStore PKCS#11 em ambiente Linux</title>

        <para>
            Para carregar um KeyStore PKCS#11 basta utilizar a classe
            <emphasis>org.demoiselle.signer.core.keystore.loader.implementation.DriverKeyStoreLoader</emphasis>
        </para>

        <para>
            Para configuração de drivers favor acessar a área de Configuração do componente em
            <xref linkend="lista-drivers" />
            .
        </para>

        <para>
            Abaixo temos exemplos de uso.
        </para>

        <programlisting role="JAVA">
            <![CDATA[KeyStore keyStore = (new DriverKeyStoreLoader()).getKeyStore("PIN NUMBER");]]>
        </programlisting>

        <programlisting role="JAVA">
            <![CDATA[KeyStore keyStore = KeyStoreLoaderFactory.factoryKeyStoreLoader().getKeyStore("PIN NUMBER");]]>
        </programlisting>

        <para>
            Caso se queira instanciar um KeyStore a partir de um driver específico que não esteja na lista de driver configurada, é possível informar o driver como parâmetro para a classe, veja o exemplo:
        </para>

        <programlisting role="JAVA">
            <![CDATA[KeyStore keyStore = (new DriverKeyStoreLoader()).getKeyStore("PIN NUMBER", "Pronova", "/usr/lib/libepsng_p11.so");]]>
        </programlisting>

        <programlisting role="JAVA">
            <![CDATA[KeyStore keyStore = (new DriverKeyStoreLoader()).getKeyStore("PIN NUMBER", "/usr/lib/libepsng_p11.so");]]>
        </programlisting>

        <important>
            <para>
                Este código também funciona em ambiente Windows, bastando especificar o driver correto a ser utilizado.
            </para>
        </important>

    </section>

    <section>
        <title>Carregamento de KeyStore PKCS#11 em ambiente Windows</title>
        <para>
            Para carregar um KeyStore utilizando a API nativa do Windows basta utilizar a classe
            <emphasis>br.gov.frameworkdemoiselle.certificate.keystore.loader.implementation.MSKeyStoreLoader.</emphasis>
        </para>

        <para>
            Abaixo temos exemplos de uso.
        </para>

        <programlisting role="JAVA">
            <![CDATA[KeyStore keyStore = (new MSKeyStoreLoader()).getKeyStore(null);]]>
        </programlisting>

        <programlisting role="JAVA">
            <![CDATA[KeyStore keyStore = KeyStoreLoaderFactory.factoryKeyStoreLoader().getKeyStore(null);]]>
        </programlisting>

        <important>
            <para>
                Este recurso só funciona em JVM 1.6 ou superior. Caso deseje executar em um ambiente com o Java mais antigo, desabilite a camada MSCAPI e faça o acesso
                diretamente pelo driver. Para saber como proceder, consulte
                <xref linkend="disable_layer_mscapi" />
                .
            </para>
        </important>
    </section>

    <section id="lista-drivers">
        <title>Lista de Drivers</title>
        <para>
            Uma das configurações mais importantes desse componente é a lista de drivers PKCS#11 e seus respectivos arquivos. O componente já possui uma lista pré-estabelecida conforme a
            tabela a seguir.
        </para>

        <table frame="all" pgwide="1">
            <title>Drivers predefinidos para Linux</title>
            <tgroup colsep="1" cols="1">
                <colspec colnum="1" colname="c0" />
                <thead>
                    <row>
                        <entry>Caminho (Path) do Driver</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>/usr/lib/libaetpkss.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libgpkcs11.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libgpkcs11.so.2</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libepsng_p11.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libepsng_p11.so.1</entry>
                    </row>
                    <row>
                        <entry>/usr/local/ngsrv/libepsng_p11.so.1</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libeTPkcs11.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libeToken.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libeToken.so.4</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libcmP11.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libwdpkcs.so</entry>
                    </row>
                    <row>
                        <entry>/usr/local/lib64/libwdpkcs.so</entry>
                    </row>
                    <row>
                        <entry>/usr/local/lib/libwdpkcs.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/watchdata/ICP/lib/libwdpkcs_icp.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/watchdata/lib/libwdpkcs.so</entry>
                    </row>
                    <row>
                        <entry>/opt/watchdata/lib64/libwdpkcs.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libaetpkss.so.3</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libaetpkss.so.3.0</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/opensc-pkcs11.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/pkcs11/opensc-pkcs11.so</entry>
                    </row>
                    <row>
                        <entry>/usr/local/ngsrv/libepsng_p11.so.1.2.2</entry>
                    </row>
                    <row>
                        <entry>/usr/local/AWP/lib/libOcsCryptoki.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libscmccid.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib64/libeToken.so</entry>
                    </row>
                    <row>
                        <entry>/opt/ePass2003-Castle-20141128/i386/redist/libcastle.so.1.0.0</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/x86_64-linux-gnu/opensc-pkcs11.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/libneoidp11.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so</entry>
                    </row>
                    <row>
                        <entry>/usr/lib/opensc/opensc­pkcs11.so</entry>
                    </row>

                </tbody>
            </tgroup>
        </table>
        <table frame="all" pgwide="1">
            <title>Drivers predefinidos para windows</title>
            <tgroup colsep="1" cols="1">
                <colspec colnum="1" colname="c0" />
                <thead>
                    <row>
                        <entry>Caminho (Path) do Driver</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>WINDOWS_HOME/system32/ngp11v211.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/aetpkss1.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/gclib.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/pk2priv.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/w32pk2ig.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/eTPkcs11.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/acospkcs11.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/dkck201.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/dkck232.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/cryptoki22.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/acpkcs.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/slbck.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/cmP11.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/system32/WDPKCS.dll</entry>
                    </row>
                    <row>
                        <entry>WINDOWS_HOME/System32/Watchdata/Watchdata Brazil CSP v1.0/WDPKCS.dll</entry>
                    </row>
                    <row>
                        <entry>/Arquivos de programas/Gemplus/GemSafe Libraries/BIN/gclib.dll</entry>
                    </row>
                    <row>
                        <entry>/Program Files/Gemplus/GemSafe Libraries/BIN/gclib.dll</entry>
                    </row>

                    <row>
                        <entry>/system32/SerproPkcs11.dll</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <table frame="all" pgwide="1">
            <title>Drivers predefinidos para Mac</title>
            <tgroup colsep="1" cols="1">
                <colspec colnum="1" colname="c0" />
                <thead>
                    <row>
                        <entry>Caminho (Path) do Driver</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>/usr/lib/libwdpkcs.dylib</entry>
                    </row>
                    <row>
                        <entry>/usr/local/lib/libwdpkcs.dylib</entry>
                    </row>

                    <row>
                        <entry>/usr/local/lib/libetpkcs11.dylib</entry>
                    </row>
                    <row>
                        <entry>/usr/local/lib/libaetpkss.dylib</entry>
                    </row>
                    <row>
                        <entry>//Applications//NeoID Desktop.app//Contents//Java//tools//macos//libneoidp11.dylib</entry>
                    </row>

                </tbody>
            </tgroup>
        </table>


    </section>

    <section>
        <title>Configuração de Token / SmartCard em tempo de execução</title>

        <para>
            É possível, porém, adicionar mais drivers em tempo de execução. Para isso é necessário trabalhar com a classe
            <literal>org.demoiselle.signer.core.keystore.loader.configuration.Configuration.</literal>
        </para>

        <programlisting role="JAVA">
            <![CDATA[Configuration.getInstance().addDriver("Nome do Driver", "Path do Driver");]]>
        </programlisting>

        <para>
            Este código irá procurar pelo driver e caso ele exista, ou seja, o path do arquivo for válido, o driver será colocado a disposição para futuro uso pelas
            implementações de carregamento de KeyStore.
        </para>

        <para>
            Caso seja necessário verificar os drivers já informados, podemos usar a seguinte construção:
        </para>

        <programlisting role="JAVA">
            <![CDATA[Map<String, String> drivers = Configuration.getInstance().getDrivers();]]>
        </programlisting>


    </section>

    <section>
        <title>Configuração de Token / SmartCard por variáveis de ambiente</title>

        <para>
            Em algumas ocasiões pode ser inviável utilizar o Configuration para adicionar um driver diretamente no código. Neste caso, A API do Java permite definir um arquivo
            de configuração onde pode-se informar o nome do driver e seus parâmetros. O componente permite a definição desse arquivo por meio de váriáveis de
            ambiente ou variáveis da JVM.
        </para>

        <para>
            Abaixo temos o exemplo de como declarar essas configurações.
        </para>


        <table frame="all" pgwide="1">
            <title>Configurações do PKCS#11</title>
            <tgroup colsep="1" cols="3">
                <colspec colnum="1" colname="c0" />
                <colspec colnum="2" colname="c1" />
                <colspec colnum="3" colname="c2" />
                <thead>
                    <row>
                        <entry>Ambiente</entry>
                        <entry>Variável de Ambiente</entry>
                        <entry>Variável JVM</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Linux</entry>
                        <entry>export PKCS11_CONFIG_FILE=/usr/pkcs11/drivers.config</entry>
                        <entry>-DPKCS11_CONFIG_FILE=/usr/pkcs11/drivers.config</entry>
                    </row>
                    <row>
                        <entry>Windows</entry>
                        <entry>set PKCS11_CONFIG_FILE=c:/pkcs11/drivers.config</entry>
                        <entry>-DPKCS11_CONFIG_FILE=c:/pkcs11/drivers.config</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            A estrutura deste arquivo pode ser encontrada
            <ulink url="http://java.sun.com/j2se/1.5.0/docs/guide/security/p11guide.html">aqui</ulink>
            para Java 1.5,
            <ulink url="http://java.sun.com/javase/6/docs/technotes/guides/security/p11guide.html">aqui</ulink>
            para Java 1.6 ou
            <ulink url="http://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html">aqui</ulink>
            para Java 1.7.
        </para>

        <para>
            Uma alternativa a este arquivo de configuração é informar o driver diretamente. Para isso basta informar na variável, conforme o exemplo abaixo.
        </para>


        <table frame="all" pgwide="1">
            <title>Configurações do PKCS#11</title>
            <tgroup colsep="1" cols="3">
                <colspec colnum="1" colname="c0" />
                <colspec colnum="2" colname="c1" />
                <colspec colnum="3" colname="c2" />
                <thead>
                    <row>
                        <entry>Ambiente</entry>
                        <entry>Variável de Ambiente</entry>
                        <entry>Variável JVM</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Linux</entry>
                        <entry>export PKCS11_DRIVER=/usr/lib/libepsng_p11.so</entry>
                        <entry>-DPKCS11_DRIVER=/usr/lib/libepsng_p11.so</entry>
                    </row>
                    <row>
                        <entry>Windows</entry>
                        <entry>set PKCS11_DRIVER=/WINDOWS/system32/ngp11v211.dll</entry>
                        <entry>-DPKCS11_DRIVER=/WINDOWS/system32/ngp11v211.dll</entry>
                    </row>
                    <row>
                        <entry>Linux</entry>
                        <entry>export PKCS11_DRIVER=Pronova::/usr/lib/libepsng_p11.so</entry>
                        <entry>-DPKCS11_DRIVER=Pronova::/usr/lib/libepsng_p11.so</entry>
                    </row>
                    <row>
                        <entry>Windows</entry>
                        <entry>set PKCS11_DRIVER=Pronova::/WINDOWS/system32/ngp11v211.dll</entry>
                        <entry>-DPKCS11_DRIVER=Pronova::/WINDOWS/system32/ngp11v211.dll</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            Quando a variável for declarada através da JVM, ela deve ser feita diretamente no painel de controle do JAVA. A seguir demonstramos a configuração para o sistema Windows.
        </para>

        <para>
            Abra o painel de controle e seleciona e abra o aplicativo "Java".
        </para>

        <para>
            <figure>
                <title>
                    Java no Painel de Controle
                </title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/keystore_tela01.png" format="PNG" align="center" scalefit="1" width="75%" />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>

        <para>
            Selecione a aba "Java" e clique em "View..."
        </para>

        <para>
            <figure>
                <title>
                    Configurações do ambiente Java
                </title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/keystore_tela02.png" format="PNG" align="center" scalefit="1" width="75%" />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>

        <para>
            Na aba "User", em "Runtime Parameters", coloque a declaração da variável. Em seguida, aplique as alterações.
        </para>

        <para>
            <figure>
                <title>
                    Desabilitando a camada MSCAPI
                </title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/keystore_tela03.png" format="PNG" align="center" scalefit="1" width="75%" />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
    </section>

    <section>
        <title>Configuração de Token / SmartCard por arquivo de configurações</title>
        <para>
            As configurações acima demonstram uma configuração mais refinada para o carregamento de certificados em dispositivos, mas o componente possui um procedimento
            padrão a ser executado caso se deseje um método mais simplificado. A seguir é explicado como utilizar este mecanismo.
        </para>

        <section>
            <title>Utilizando certificados armazenados em Disco ou em Token / SmartCard no Windows</title>
            <para>
                O Sistema Operacional Windows fornece uma camada chamada MSCAPI, ou Microsoft CryptoAPI, que facilita o acesso a certificados armazenados em disco ou em dispositivos
                criptográficos. Neste tipo de acesso, basta que o certificado esteja corretamente instalado e válido, e a própria camada nos fornecerá o driver correto e os meios para
                acessar os certificados. Até a versão 5 do Java não existia um provedor de acesso para esta camada, mas na versão 6 em diante foi implementado
                o provedor
                <emphasis>SunMSCAPI</emphasis>
                para lidar com este tipo de acesso.
            </para>
        </section>


        <section>
            <title>Utilizando certificados armazenados em Disco no Linux ou Mac</title>

            <para>
                Ao Contrario do Windows, que utiliza a API da
                <ulink url="http://en.wikipedia.org/wiki/Microsoft_CryptoAPI">MS-CAPI</ulink>
                para abstrair o acesso aos certificados digitais, em outros sistemas operacionais este recurso não existe. Para efetuar o acesso, precisamos criar um arquivo
                de configuração informando os parâmetros de acesso.
            </para>

            <para> Primeiro é preciso importar o certificado A1 (arquivo) no Firefox, conforme as orientações
			</para>
            <para>
                <figure>
                    <title>
                    Abrindo menu de configurações do Firefox
                </title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/config_firefox_1.png" format="PNG" align="center" scalefit="1" width="75%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para>
                <figure>
                    <title>
                    Abrindo opção "Preferências"
                </title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/config_firefox_2.png" format="PNG" align="center" scalefit="1" width="75%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para>
                <figure>
                    <title>
                    Abrindo item "Avançado"
                </title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/config_firefox_3.png" format="PNG" align="center" scalefit="1" width="75%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para>
                <figure>
                    <title>
                    Abrindo aba "Certificados"
                </title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/config_firefox_3_1.png" format="PNG" align="center" scalefit="1" width="75%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para>
                <figure>
                    <title>
                    Clicando no botão "Ver Certificados"
                </title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/config_firefox_3_2.png" format="PNG" align="center" scalefit="1" width="75%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para>
                <figure>
                    <title>
                    Selecionando a aba "Seus Certificados"
                </title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/config_firefox_4_0.png" format="PNG" align="center" scalefit="1" width="75%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para>
                <figure>
                    <title>
                    Clicando no botão "Importar..."
                </title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/config_firefox_4.png" format="PNG" align="center" scalefit="1" width="75%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para>
                <figure>
                    <title>
                    Selecionando o arquivo de certificado
                </title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/config_firefox_5.png" format="PNG" align="center" scalefit="1" width="75%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para>
                Após feita a importação no Firefox, para viabilizar o acesso em um sistema tipo LINUX, deve ser criado um arquivo chamado
                <filename>drivers.config</filename>
                dentro do diretório
                <citation>/home/usuario</citation>
                com a parametrização mostrada abaixo. Nesta configuração serão carregados todos os certificados A1 que estejam
                instalados no Firefox.
            </para>

            <para>
                Para o Linux:
            </para>


            <programlisting role="XHTML">
                <![CDATA[
name = Provedor
slot = 2
# para 64 bits
library = /usr/lib/x86_64-linux-gnu/nss/libsoftokn3.so
# para 32 bits
# library = /usr/lib/nss/libsoftokn3.so
nssArgs = "configdir='/home/<usuario>/.mozilla/firefox/<nnnnnnnn>.default'"
showInfo=true            
]]>
            </programlisting>


            <para>
                Para o Mac OS, também depois de importar no Firefox, a seguinte configuração:
            </para>

            <programlisting role="XHTML">
                <![CDATA[
name = Provedor
slot = 2
library = /Applications/Firefox.app/Contents/MacOS/libsoftokn3.dylib
nssArgs = "configdir='/Users/<usuario>/Library/Application Support/Firefox/Profiles/<nnnnnnnnn>.default'"
]]>
            </programlisting>

            <important>
                <para>
                    A sequência de caracteres que precede o
                    <emphasis>.default</emphasis>
                    , como em
                    <emphasis>nnnnnnnn.default</emphasis>
                    é criptografada e, sendo assim, é diferente para cada equipamento e cada usuário.
                </para>
                <para>Caso as configurações não estejam fazendo efeito, um último recurso é fechar o Firefox apagar o arquivo de profile (as configurações serão perdidas, faça backup do que for possível, antes)</para>
            </important>

        </section>

        <section>
            <title>Utilizando certificados armazenados em Token / SmartCard no Linux ou Mac</title>

            <para>
                Para configurar um token A3, o conteúdo do arquivo
                <filename>drivers.config</filename>
                deve ser especificado como mostrado abaixo.
            </para>

            <programlisting role="JAVA">
                <![CDATA[
name = Provedor
description = Token Pronova ePass2000
library = /usr/local/ngsrv/libepsng_p11.so.1.2.2
]]>
            </programlisting>

            <important>
                <para>
                    Não é possível utilizar certificados A3 e A1 no Linux ou Mac simultaneamente, devendo ser configurado somente UM dos tipos de acesso em um determinado momento.
                </para>
            </important>

        </section>

    </section>

    <section id="disable_layer_mscapi">
        <title>Desabilitar a camada de acesso SunMSCAPI</title>
        <para>
            Quando o componente é utilizado em ambiente Windows, o acesso é feito através de uma camada de abstração chamada MSCAPI, que abstrai informações que são particulares
            de cada token ou smartcard, como os drivers do dispositivo, por exemplo. Este tipo de recurso facilita o uso do componente com dispositivos de diversos
            fabricantes.
            Porém, podem existir casos específicos em que o acesso precisa ser feito diretamente ao driver para utilização de funções específicas, como forçar o logout de um token.
            Para isso, é necessário informar na JVM um parâmetro chamado
            <literal>mscapi.disabled</literal>
            passando o valor
            <literal>true</literal>
            . Este parâmetro informa que
            o acesso será feito via PKCS11, sendo necessário informar o arquivo de configuração do token que se deseja acessar. Caso o parâmetro
            <literal>mscapi.disabled</literal>
            esteja ausente, o componente fará uso do MSCAPI normalmente.
        </para>
        <para>
            Também é possível desabilitar o MSCAPI através de uma configuração do SIGNER. Conforme mostrado a seguir:
			</para>
        <programlisting role="JAVA">
            <![CDATA[...
                        import org.demoiselle.signer.core.keystore.loader.configuration.Configuration;
                        ...
                        Configuration.setMSCAPI_ON(false);
                        ...]]>
        </programlisting>

        <para>
            A seguir demonstramos a configuração para o sistema Windows: 
        </para>

        <para>
            <figure>
                <title>
                    Desabilitando a camada MSCAPI (-Dmscapi.disabled=true)
                </title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/keystore_tela04.png" format="PNG" align="center" scalefit="1" width="75%" />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
    </section>
</chapter>